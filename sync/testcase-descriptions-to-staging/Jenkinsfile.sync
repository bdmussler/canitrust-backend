node('Dev') {

  dir('backend') {
    stage('Keep Backend repository up to date') {
      def repo = 'backend'
      def gitBranch = 'master'
      def gitLabUrl = 'https://github.com/canitrust/backend.git'
      try {
        deleteDir()
      } catch (err) {
        echo "Caught: ${err}"
      }
      git branch: gitBranch, url: gitLabUrl
      echo "Checking out $repo form $gitLabUrl, branch $gitBranch"
    }

    withCredentials([
      usernamePassword(credentialsId: 'mongo-staging-backup', usernameVariable: 'MONGO_STAGING_USER', passwordVariable: 'MONGO_STAGING_PASS')
    ]) {
      def DATABASE_NAME = 'cit-stg'
      def MONGO_STAGING_URI = "mongodb+srv://${MONGO_STAGING_USER}:${MONGO_STAGING_PASS}@${env.MONGO_STAGING_HOST}/${DATABASE_NAME}"

      dir('sync/testcase-descriptions-to-staging') {
        stage('Extract to json array data') {
          // For each test case in map.json that is set to "isLive": true, the corresponding test case content from testcases.json is synced to the staging database
          // All tags in tags.json are synced to the staging database
          sh returnStdout: true, script: "python extractDataScript.py"
        }

        stage('Synchronize testcases') {
          sh returnStdout: true, script: "mongoimport --uri ${MONGO_STAGING_URI} --ssl --collection testcases --drop --jsonArray testcases.db.json"
        }
        stage('Synchronize tags') {
          sh returnStdout: true, script: "mongoimport --uri ${MONGO_STAGING_URI} --ssl --collection tags --drop --jsonArray tags.db.json"
        }
      }
    }
  }

  try {
    cleanWs()
  } catch (err) {
    echo "Caught: ${err}"
  }
}
