node('Dev') {
  def lastUpdate = ''
  def dateQuery = ''
  dir('backend') {
    stage('Keep Backend repository up to date') {
      def repo = 'backend'
      def gitBranch = 'master'
      def gitLabUrl = 'https://github.com/canitrust/backend.git'
      try {
        deleteDir()
      } catch (err) {
        echo "Caught: ${err}"
      }
      git branch: gitBranch, url: gitLabUrl
      echo "Checking out $repo form $gitLabUrl, branch $gitBranch"
    }
    
    withCredentials([
      usernamePassword(credentialsId: 'mongo-staging-backup', usernameVariable: 'MONGO_STAGING_USER', passwordVariable: 'MONGO_STAGING_PASS')
    ]) {
      def DATABASE_NAME = 'cit-stg'
      def MONGO_STAGING_URI = "mongodb+srv://${MONGO_STAGING_USER}:${MONGO_STAGING_PASS}@${env.MONGO_STAGING_HOST}/${DATABASE_NAME}"
      dir('sync/from-backend-to-staging') {
        stage('Connect to Staging DB - get latest update timestamp') {
          sh returnStdout: true, script: "mongoexport --uri ${MONGO_STAGING_URI} --collection testresults --sort '{date_lasttest:-1}' --fields date_lasttest --limit 1 --out ./latest_testresult.json"
          try {
            sh returnStdout: true, script: "cat ./latest_testresult.json | grep -E '[0-9T:.-]+Z' -o > ./latest_update_timestamp.txt"
          } catch(err) {
            echo "Caught: ${err}"
          }
          script {
            echo "Try to read latest update timestamp"
            lastUpdate = readFile('./latest_update_timestamp.txt')
            if (lastUpdate) {
              echo "Latest update timestamp: ${lastUpdate}"
              lastUpdate = lastUpdate.trim()
              dateQuery = "--query '{date: {\$gt: new Date(\"${lastUpdate}\")}}'"
            } else {
              echo "Staging DB does not have any testresult"
            }
          }
        }

        stage('Connect to Backend DB, find all entries since latest timestamp') {
          sh returnStdout: true, script: "mongoexport --uri 'mongodb://localhost:27017/Backend' --collection test_Lab ${dateQuery} --sort '{date:1}' --out ./dataLine.json"
        }

        stage('Convert entries to Frontend DB format') {
          sh returnStdout: true, script: "python3 translate.py dataLine.json"
        }

        stage('Update staging DB with new testresults') {
          sh returnStdout: true, script: "mongoimport --uri ${MONGO_STAGING_URI} --ssl --collection testresults --file ./translated.json --mode 'upsert' --upsertFields 'testNumber','browser','browserVer'"
        }
      }
    }
  }

  try {
    cleanWs()
  } catch (err) {
    echo "Caught: ${err}"
  }
}